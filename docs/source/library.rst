.. _library:

=======
Library
=======

.. note::

    This page contains autogenerated API docs.

    If nothing appears here, this is probably because Sphinx
    was run in an environment that has not all the libraries
    required to introspect the code. (typically: pyzmq)


Powerhose is organized into a simple hierarchy of classes and a few functions:

- :func:`get_cluster` -- a function that create a whole cluster.

- :class:`Job` -- A class that holds a job to be performed.

- :class:`Broker` -- A class that pass the jobs it receives to workers.

- :class:`Worker` -- A class that connects to a broker and pass jobs it receives
  to a Python callable.

- :class:`Ping` and :class:`Pong` -- implements q heartbeat. The :class:`Broker` class
  runs a :class:`Pong` instance and each worker a  :class:`Ping` instance.

- :class:`Client` -- A class that connects to a broker and let you run jobs against
  it.



get_cluster
===========

The :func:`get_cluster` function creates a :class:`Broker` and several
:class:`Worker` instance. It can be run in the background for conveniency.


.. autofunction:: powerhose.get_cluster


Job
===


.. autoclass:: powerhose.job.Job
   :members: add_header, serialize, load_from_string


Example::

    >>> from powerhose.job import Job
    >>> job = Job('4*2')
    >>> job.serialize()
    'NONE:::4*2'
    >>> Job.load_from_string('NONE:::4*2')
    <powerhose.job.Job object at 0x107b78c50>
    >>> Job.load_from_string('NONE:::4*2').data
    '4*2'


Broker
======

.. autoclass:: powerhose.broker.Broker
   :members: start,stop


Worker
======

.. autoclass:: powerhose.worker.Worker
   :members: start,stop


Heartbeat
=========

.. autoclass:: powerhose.heartbeat.Ping
   :members: stop,start

.. autoclass:: powerhose.heartbeat.Pong
   :members: stop,start


Client
======

.. autoclass:: powerhose.client.Client
   :members: execute




